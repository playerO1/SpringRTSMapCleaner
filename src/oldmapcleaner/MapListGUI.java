/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oldmapcleaner;

import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import static oldmapcleaner.OldMapCleaner.fileSizeToStr;
import static oldmapcleaner.OldMapCleaner.showPercent;

/**
 *
 * @author PlayerO1
 */
public class MapListGUI extends javax.swing.JFrame implements MapUpdateListener{

    /**
     * Creates new form MapListGUI
     */
    public MapListGUI() {
        initComponents();
        OldMapCleaner.addNotifyListener(this);
    }
    
    private List<MapInfo> maps;
    private List<MapInfo> mapsDataSource; // real data source, can be modifed then send onMapUpdate
    private DefaultListModel showLst;
    private String lobbyCashePath;
    public long statAllSize, statUnusedSize, statToDeleteSize;
    public int statUnusingMaps, statUsedPlays, statToDeleteCount;
    public float statAverageUsedPerPlayableMap;
    protected static final int UNUSED_LIMIT=0;// level for check unused maps
    
    private MapInfo currentShowingMap=null;// map in jPanelSelectedInfo
    /**
     * Set data source then init visual list component.
     * @param _maps
     * @param _lobbyCashePath 
     */
    public void setMapList(List<MapInfo> _maps,String _lobbyCashePath) {
        this.mapsDataSource=_maps;
        this.lobbyCashePath=_lobbyCashePath;
        this.maps=new ArrayList<MapInfo>(_maps); // clone for retain index
        showLst = new DefaultListModel();
        
        if (currentShowingMap!=null) {
            showSelectedInfoFor(null);
            //TODO what doing with selected item index for jList?
        }
        
        statAllSize=statUnusedSize=statToDeleteSize=0;
        statUnusingMaps=statUsedPlays=statToDeleteCount=0;
        for (MapInfo mi:maps) { // collect the statistic
            statAllSize+=mi.fileSize;
            if (mi.count<=UNUSED_LIMIT) {
                statUnusedSize+=mi.fileSize;
                statUnusingMaps++;
            } else {
                statUsedPlays+=mi.count;
            }
            if (mi.markToDelete) {
                statToDeleteSize+=mi.fileSize;
                statToDeleteCount++;
            }
        }
        int usingMaps=maps.size()-statUnusingMaps;
        if (usingMaps!=0) {
            statAverageUsedPerPlayableMap = (float)statUsedPlays / (float)usingMaps;
        } else statAverageUsedPerPlayableMap = 0;
        
        for (MapInfo mi:maps) // add items
            showLst.addElement(mapListItemDecorator(mi));
        jListMaps.setModel(showLst);
        
        DecimalFormat floatFormat = new DecimalFormat("#0.0");
        
        String txt="All "+maps.size()+" maps of "+fileSizeToStr(statAllSize)+" size."
                + " Average "+floatFormat.format(statAverageUsedPerPlayableMap)+" play per using maps."
                + "<br>No used "+statUnusingMaps+" maps ("+showPercent(statUnusingMaps,maps.size())+") of "+fileSizeToStr(statUnusedSize)+" size.";
        jlTotalInfo.setText("<html>"+txt+"</html>");
        //TODO refresh selection and show info.
    }

    protected String mapListItemDecorator(MapInfo mi) {
        String name=mi.name;
        if (mi.count<=UNUSED_LIMIT) name="<i>"+name+"</i>";
        else if (mi.count>statAverageUsedPerPlayableMap) {
            name="<b>"+name+"</b>";
        }
        if (mi.markToDelete) {//TODO improvement style
            return "<html><s><font color=red>"+name+"</font></s></html>";
        } else {
            return "<html>"+name+"</html>";
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_MapsList = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListMaps = new javax.swing.JList();
        jPanelSelectedInfo = new javax.swing.JPanel();
        jlSelectMapName = new javax.swing.JLabel();
        jlSelectMapInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlPrewiew = new javax.swing.JLabel();
        jPanelBottomAllStats = new javax.swing.JPanel();
        jlTotalInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Old map cleaner - for Spring RTS");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel3.setText("Maps list, use Delete/Insert");

        jListMaps.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListMaps.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListMapsValueChanged(evt);
            }
        });
        jListMaps.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListMapsKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jListMaps);

        javax.swing.GroupLayout jPanel_MapsListLayout = new javax.swing.GroupLayout(jPanel_MapsList);
        jPanel_MapsList.setLayout(jPanel_MapsListLayout);
        jPanel_MapsListLayout.setHorizontalGroup(
            jPanel_MapsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_MapsListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane2)
        );
        jPanel_MapsListLayout.setVerticalGroup(
            jPanel_MapsListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_MapsListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
        );

        jlSelectMapName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSelectMapName.setText("Selected map");

        jlSelectMapInfo.setText("size, uses, dates, etc.");

        jlPrewiew.setText("Map prewiew from cashe");
        jScrollPane1.setViewportView(jlPrewiew);

        javax.swing.GroupLayout jPanelSelectedInfoLayout = new javax.swing.GroupLayout(jPanelSelectedInfo);
        jPanelSelectedInfo.setLayout(jPanelSelectedInfoLayout);
        jPanelSelectedInfoLayout.setHorizontalGroup(
            jPanelSelectedInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSelectedInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSelectedInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlSelectMapName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlSelectMapInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );
        jPanelSelectedInfoLayout.setVerticalGroup(
            jPanelSelectedInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSelectedInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlSelectMapName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlSelectMapInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jlTotalInfo.setText("All maps, used and unused statistic.");

        javax.swing.GroupLayout jPanelBottomAllStatsLayout = new javax.swing.GroupLayout(jPanelBottomAllStats);
        jPanelBottomAllStats.setLayout(jPanelBottomAllStatsLayout);
        jPanelBottomAllStatsLayout.setHorizontalGroup(
            jPanelBottomAllStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomAllStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTotalInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelBottomAllStatsLayout.setVerticalGroup(
            jPanelBottomAllStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomAllStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTotalInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelBottomAllStats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_MapsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelSelectedInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_MapsList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelSelectedInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelBottomAllStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListMapsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListMapsValueChanged
        MapInfo mi=maps.get(jListMaps.getSelectedIndex());//TODO multiselect
        showSelectedInfoFor(mi);
    }//GEN-LAST:event_jListMapsValueChanged

    private void showSelectedInfoFor(MapInfo mi) {
        currentShowingMap=mi;
        if (mi==null) {
            jlSelectMapName.setText("Selected map");
            jlPrewiew.setIcon(null);
            jlPrewiew.setText("Maps preview from cashe");
            jlSelectMapInfo.setText("size, uses, dates, etc.");
            return;
        }
        jlSelectMapName.setText(mi.name);
        BufferedImage img=mi.loadPrewiev(lobbyCashePath);
        if (img==null) {
            jlPrewiew.setIcon(null);
            jlPrewiew.setText("No cashe prewiev for "+jListMaps.getSelectedIndex());
        } else {
            jlPrewiew.setIcon(new ImageIcon(img));
            jlPrewiew.setText(null);
        }
        String txt="Size <b>"+fileSizeToStr(mi.fileSize)+"</b>, used "+mi.count;
        if (mi.firstTime!=null) {
            txt+="<br/>";
            SimpleDateFormat dateFormat=new SimpleDateFormat("dd.MM.yyyy");//TODO date ??? DateFormat.SHORT;
            if (mi.firstTime!=mi.lastTime)
                txt+="First "+dateFormat.format(mi.firstTime)+"; ";
            txt+="Last <b>"+dateFormat.format(mi.lastTime)+"</b>";
        }
        if (mi.markToDelete) txt+="<br><font color=red>(mark to delete)</font>";
        jlSelectMapInfo.setText("<html>"+txt+"</html>");
    }
    
    private void jListMapsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListMapsKeyPressed
        int itmSelectId=jListMaps.getSelectedIndex();
        if (itmSelectId==-1) return;
        ArrayList<MapInfo> modifed=new ArrayList<MapInfo>();
        
        for (int itmId:jListMaps.getSelectedIndices()) {
            MapInfo mi=maps.get(itmId);
            if (evt.getKeyCode()==evt.VK_BACK_SPACE || evt.getKeyCode()==evt.VK_DELETE) {
                if (!mi.markToDelete) {
                    mi.markToDelete=true;
                    showLst.setElementAt(mapListItemDecorator(mi), itmId);
                    if (currentShowingMap==mi) showSelectedInfoFor(mi);
                    modifed.add(mi);
                }
            }
            if (evt.getKeyCode()==evt.VK_INSERT) {
                if (mi.markToDelete) {
                    mi.markToDelete=false;
                    showLst.setElementAt(mapListItemDecorator(mi), itmId);
                    if (currentShowingMap==mi) showSelectedInfoFor(mi);
                    modifed.add(mi);
                }
            }
        }
        
        if (!modifed.isEmpty()) {
            OldMapCleaner.notifyListUpdate(this, modifed);
        }
    }//GEN-LAST:event_jListMapsKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        OldMapCleaner.removeNotifyListener(this);
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapListGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListMaps;
    private javax.swing.JPanel jPanelBottomAllStats;
    private javax.swing.JPanel jPanelSelectedInfo;
    private javax.swing.JPanel jPanel_MapsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jlPrewiew;
    private javax.swing.JLabel jlSelectMapInfo;
    private javax.swing.JLabel jlSelectMapName;
    private javax.swing.JLabel jlTotalInfo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onMapUpdate(List<MapInfo> modifedObjects) {
        if (modifedObjects!=null && !modifedObjects.isEmpty()) {
            boolean haveNotFound=false;
            for (MapInfo mi:modifedObjects) {
                int itmId=maps.indexOf(mi);
                if (itmId!=-1)  {
                    showLst.setElementAt(mapListItemDecorator(mi), itmId);
                    if (currentShowingMap==mi) showSelectedInfoFor(mi);
                } else { // if remove map from list
                    if (currentShowingMap==mi) showSelectedInfoFor(null);
                    haveNotFound=true;
                }
            }
            if (!haveNotFound) return;
        }
        //TODO or If mapsDataSource modifed <> maps... compare by size?
        setMapList(mapsDataSource,lobbyCashePath); //just reinit list box.
        //TODO too much lags with DefaultListModel update.
    }
    
}
